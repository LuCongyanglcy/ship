package jiaoxi.crazyit.zip;

import java.io.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;

/**
 * Java utils 实现的Zip工具
 *
 * @author once
 */
//
//public class ZipUtils {
//    private static final int BUFF_SIZE = 1024 * 1024; // 1M Byte
//
//    /**
//     * 批量压缩文件（夹）
//     *
//     * @param resFileList 要压缩的文件（夹）列表
//     * @param zipFile 生成的压缩文件
//     * @throws IOException 当压缩过程出错时抛出
//     */
//    public static void zipFiles(Collection<File> resFileList, File zipFile) throws IOException {
//        ZipOutputStream zipout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(
//                zipFile), BUFF_SIZE));
//        for (File resFile : resFileList) {
//            zipFile(resFile, zipout, "");
//        }
//        zipout.close();
//    }
//
//    /**
//     * 批量压缩文件（夹）
//     *
//     * @param resFileList 要压缩的文件（夹）列表
//     * @param zipFile 生成的压缩文件
//     * @param comment 压缩文件的注释
//     * @throws IOException 当压缩过程出错时抛出
//     */
//    public static void zipFiles(Collection<File> resFileList, File zipFile, String comment)
//            throws IOException {
//        ZipOutputStream zipout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(
//                zipFile), BUFF_SIZE));
//        for (File resFile : resFileList) {
//            zipFile(resFile, zipout, "");
//        }
//        zipout.setComment(comment);
//        zipout.close();
//    }
//
//    /**
//     * 解压缩一个文件
//     *
//     * @param zipFile 压缩文件
//     * @param folderPath 解压缩的目标目录
//     * @throws IOException 当解压缩过程出错时抛出
//     */
//	public static void upZipFile(File zipFile, String folderPath)
//			throws ZipException, IOException {
//		File desDir = new File(folderPath);
//		if (!desDir.exists()) {
//			desDir.mkdirs();
//		}
//		ZipFile zf = new ZipFile(zipFile);
//		for (Enumeration<?> entries = zf.entries(); entries.hasMoreElements();) {
//			ZipEntry entry = ((ZipEntry) entries.nextElement());
//			String name = entry.getName();     ///判断是否为文件夹是就不处理换成这个也行 if(entry.isDirectory())  continue;  
//			if (name.endsWith(File.separator))///
//				continue;                     ///
//			InputStream in = zf.getInputStream(entry);
//			String str = folderPath + File.separator + entry.getName();
//			str = new String(str.getBytes("8859_1"), "GB2312");
//			File desFile = new File(str);
//			if (!desFile.exists()) {
//				File fileParentDir = desFile.getParentFile();
//				if (!fileParentDir.exists()) {
//					fileParentDir.mkdirs();
//				}
//				desFile.createNewFile();
//			}
//			OutputStream out = new FileOutputStream(desFile);
//			byte buffer[] = new byte[BUFF_SIZE];
//			int realLength;
//			while ((realLength = in.read(buffer)) > 0) {
//				out.write(buffer, 0, realLength);
//			}
//			in.close();
//			out.close();
//		}
//	}
//
//    /**
//     * 解压文件名包含传入文字的文件
//     *
//     * @param zipFile 压缩文件
//     * @param folderPath 目标文件夹
//     * @param nameContains 传入的文件匹配名
//     * @throws ZipException 压缩格式有误时抛出
//     * @throws IOException IO错误时抛出
//     */
//    public static ArrayList<File> upZipSelectedFile(File zipFile, String folderPath,
//            String nameContains) throws ZipException, IOException {
//        ArrayList<File> fileList = new ArrayList<File>();
//
//        File desDir = new File(folderPath);
//        if (!desDir.exists()) {
//            desDir.mkdir();
//        }
//
//        ZipFile zf = new ZipFile(zipFile);
//        for (Enumeration<?> entries = zf.entries(); entries.hasMoreElements();) {
//            ZipEntry entry = ((ZipEntry)entries.nextElement());
//            if (entry.getName().contains(nameContains)) {
//                InputStream in = zf.getInputStream(entry);
//                String str = folderPath + File.separator + entry.getName();
//                str = new String(str.getBytes("8859_1"), "GB2312");
//                // str.getBytes("GB2312"),"8859_1" 输出
//                // str.getBytes("8859_1"),"GB2312" 输入
//                File desFile = new File(str);
//                if (!desFile.exists()) {
//                    File fileParentDir = desFile.getParentFile();
//                    if (!fileParentDir.exists()) {
//                        fileParentDir.mkdirs();
//                    }
//                    desFile.createNewFile();
//                }
//                OutputStream out = new FileOutputStream(desFile);
//                byte buffer[] = new byte[BUFF_SIZE];
//                int realLength;
//                while ((realLength = in.read(buffer)) > 0) {
//                    out.write(buffer, 0, realLength);
//                }
//                in.close();
//                out.close();
//                fileList.add(desFile);
//            }
//        }
//        return fileList;
//    }
//
//    /**
//     * 获得压缩文件内文件列表
//     *
//     * @param zipFile 压缩文件
//     * @return 压缩文件内文件名称
//     * @throws ZipException 压缩文件格式有误时抛出
//     * @throws IOException 当解压缩过程出错时抛出
//     */
//    public static ArrayList<String> getEntriesNames(File zipFile) throws ZipException, IOException {
//        ArrayList<String> entryNames = new ArrayList<String>();
//        Enumeration<?> entries = getEntriesEnumeration(zipFile);
//        while (entries.hasMoreElements()) {
//            ZipEntry entry = ((ZipEntry)entries.nextElement());
//            entryNames.add(new String(getEntryName(entry).getBytes("GB2312"), "8859_1"));
//        }
//        return entryNames;
//    }
//
//    /**
//     * 获得压缩文件内压缩文件对象以取得其属性
//     *
//     * @param zipFile 压缩文件
//     * @return 返回一个压缩文件列表
//     * @throws ZipException 压缩文件格式有误时抛出
//     * @throws IOException IO操作有误时抛出
//     */
//    public static Enumeration<?> getEntriesEnumeration(File zipFile) throws ZipException,
//            IOException {
//        ZipFile zf = new ZipFile(zipFile);
//        return zf.entries();
//
//    }
//
//    /**
//     * 取得压缩文件对象的注释
//     *
//     * @param entry 压缩文件对象
//     * @return 压缩文件对象的注释
//     * @throws UnsupportedEncodingException
//     */
//    public static String getEntryComment(ZipEntry entry) throws UnsupportedEncodingException {
//        return new String(entry.getComment().getBytes("GB2312"), "8859_1");
//    }
//
//    /**
//     * 取得压缩文件对象的名称
//     *
//     * @param entry 压缩文件对象
//     * @return 压缩文件对象的名称
//     * @throws UnsupportedEncodingException
//     */
//    public static String getEntryName(ZipEntry entry) throws UnsupportedEncodingException {
//        return new String(entry.getName().getBytes("GB2312"), "8859_1");
//    }
//
//    /**
//     * 压缩文件
//     *
//     * @param resFile 需要压缩的文件（夹）
//     * @param zipout 压缩的目的文件
//     * @param rootpath 压缩的文件路径
//     * @throws FileNotFoundException 找不到文件时抛出
//     * @throws IOException 当压缩过程出错时抛出
//     */
//    public static void zipFile(File resFile, ZipOutputStream zipout, String rootpath)
//            throws FileNotFoundException, IOException {
//        rootpath = rootpath + (rootpath.trim().length() == 0 ? "" : File.separator)
//                + resFile.getName();
//        rootpath = new String(rootpath.getBytes("8859_1"), "GB2312");
//        if (resFile.isDirectory()) {
//            File[] fileList = resFile.listFiles();
//            for (File file : fileList) {
//                zipFile(file, zipout, rootpath);
//            }
//        } else {
//            byte buffer[] = new byte[BUFF_SIZE];
//            BufferedInputStream in = new BufferedInputStream(new FileInputStream(resFile),
//                    BUFF_SIZE);
//            zipout.putNextEntry(new ZipEntry(rootpath));
//            int realLength;
//            while ((realLength = in.read(buffer)) != -1) {
//                zipout.write(buffer, 0, realLength);
//            }
//            in.close();
//            zipout.flush();
//            zipout.closeEntry();
//        }
//    }
//}
public class ZipUtils {
	 
	 public static void zip(String src, String dest) throws IOException {
	  //提供了一个数据项压缩成一个ZIP归档输出流
	  ZipOutputStream out = null;
	  try {
	   
	   File outFile = new File(dest);//压缩文件路径源文件或者目录
	   File fileOrDirectory = new File(src);//源文件或者目录
	   out = new ZipOutputStream(new FileOutputStream(outFile));
	   //如果此文件是一个文件，否则为false。
	   if (fileOrDirectory.isFile()) {
	    zipFileOrDirectory(out, fileOrDirectory, "");
	   } else {
	    //返回一个文件或空阵列。
	    File[] entries = fileOrDirectory.listFiles();
	    for (int i = 0; i < entries.length; i++) {
	     // 递归压缩，更新curPaths
	     zipFileOrDirectory(out, entries[i], "");
	    }
	   }
	  } catch (IOException ex) {
	   ex.printStackTrace();
	  } finally {
	   //关闭输出流
	   if (out != null) {
	    try {
	     out.close();
	    } catch (IOException ex) {
	     ex.printStackTrace();
	    }
	   }
	  }
	 }
	 
	 private static void zipFileOrDirectory(ZipOutputStream out,
	   File fileOrDirectory, String curPath) throws IOException {
	  //从文件中读取字节的输入流
	  FileInputStream in = null;
	  try {
	   //如果此文件是一个目录，否则返回false。
	   if (!fileOrDirectory.isDirectory()) {
	    // 压缩文件
	    byte[] buffer = new byte[4096];
	    int bytes_read;
	    in = new FileInputStream(fileOrDirectory);
	    //实例代表一个条目内的ZIP归档
	    ZipEntry entry = new ZipEntry(curPath
	      + fileOrDirectory.getName());
	    //条目的信息写入底层流
	    out.putNextEntry(entry);
	    while ((bytes_read = in.read(buffer)) != -1) {
	     out.write(buffer, 0, bytes_read);
	    }
	    out.closeEntry();
	   } else {
	    // 压缩目录
	    File[] entries = fileOrDirectory.listFiles();
	    for (int i = 0; i < entries.length; i++) {
	     // 递归压缩，更新curPaths
	     zipFileOrDirectory(out, entries[i], curPath
	       + fileOrDirectory.getName() + "/");
	    }
	   }
	  } catch (IOException ex) {
	   ex.printStackTrace();
	   // throw ex;
	  } finally {
	   if (in != null) {
	    try {
	     in.close();
	    } catch (IOException ex) {
	     ex.printStackTrace();
	    }
	   }
	  }
	 }
	 
	 @SuppressWarnings("unchecked")
	 public static void unzip(String zipFileName, String outputDirectory)
	   throws IOException {
	  ZipFile zipFile = null;
	  try {
	   zipFile = new ZipFile(zipFileName);
	   Enumeration e = zipFile.entries();
	   ZipEntry zipEntry = null;
	   File dest = new File(outputDirectory);
	   dest.mkdirs();
	   while (e.hasMoreElements()) {
	    zipEntry = (ZipEntry) e.nextElement();
	    String entryName = zipEntry.getName();
	    InputStream in = null;
	    FileOutputStream out = null;
	    try {
	     if (zipEntry.isDirectory()) {
	      String name = zipEntry.getName();
	      name = name.substring(0, name.length() - 1);
	      File f = new File(outputDirectory + File.separator
	        + name);
	      f.mkdirs();
	     } else {
	      int index = entryName.lastIndexOf("\\");
	      if (index != -1) {
	       File df = new File(outputDirectory + File.separator
	         + entryName.substring(0, index));
	       df.mkdirs();
	      }
	      index = entryName.lastIndexOf("/");
	      if (index != -1) {
	       File df = new File(outputDirectory + File.separator
	         + entryName.substring(0, index));
	       df.mkdirs();
	      }
	      File f = new File(outputDirectory + File.separator
	        + zipEntry.getName());
	      // f.createNewFile();
	      in = zipFile.getInputStream(zipEntry);
	      out = new FileOutputStream(f);
	      int c;
	      byte[] by = new byte[1024];
	      while ((c = in.read(by)) != -1) {
	       out.write(by, 0, c);
	      }
	      out.flush();
	     }
	    } catch (IOException ex) {
	     ex.printStackTrace();
	     throw new IOException("解压失败：" + ex.toString());
	    } finally {
	     if (in != null) {
	      try {
	       in.close();
	      } catch (IOException ex) {
	      }
	     }
	     if (out != null) {
	      try {
	       out.close();
	      } catch (IOException ex) {
	      }
	     }
	    }
	   }
	  } catch (IOException ex) {
	   ex.printStackTrace();
	   throw new IOException("解压失败：" + ex.toString());
	  } finally {
	   if (zipFile != null) {
	    try {
	     zipFile.close();
	    } catch (IOException ex) {
	    }
	   }
	  }
	 }
	}
